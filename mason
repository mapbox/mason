#!/usr/bin/env bash

MASON_COMMAND=$1 ; shift
MASON_NAME=$1 ; shift
MASON_VERSION=$1 ; shift

set -e
set -o pipefail

function usage {
    echo "Usage: $0 <command> <lib> <version>"
}

if [ -z "${MASON_COMMAND}" ]; then
    usage
    exit 1
fi

ROOTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MASON_DIR=${MASON_DIR:-$ROOTDIR}

if [ "${MASON_COMMAND}" = "selfupdate" ]; then
    cd ~/.mason
    git pull origin master
    exit
elif [ "${MASON_COMMAND}" = "init" ]; then
    MASON_DIR_NAME=`basename $(pwd)`
    MASON_SLUG=`read -p "Package name [${MASON_DIR_NAME}]: "`
    if [ -z "${MASON_SLUG}" ]; then MASON_SLUG="${MASON_DIR_NAME}"; fi
    git init
    git checkout -b ${MASON_SLUG}
    git add script.sh
    git add .travis.yml
    if [[ -f ./patch.diff ]]; then
        git add ./patch.diff
    fi
    git commit -m "initial version of ${MASON_SLUG}"
    git remote add origin git@github.com:mapbox/mason.git || git remote set-url origin git@github.com:mapbox/mason.git
    git push --set-upstream origin ${MASON_SLUG}
    exit
elif [ "${MASON_COMMAND}" = "env" ]; then
    . ${MASON_DIR}/mason.sh > /dev/null
    eval echo \$${MASON_NAME}
    exit
fi

if [ "${MASON_COMMAND}" != "install" ]; then
    if [[ -z "${MASON_NAME}" && "${MASON_COMMAND}" != "install" ]]; then
        usage
        echo "Missing <lib>"
        exit 1
    elif [[ -z "${MASON_VERSION}" && "${MASON_COMMAND}" != "install" ]]; then
        usage
        echo "Missing <version>"
        exit 1
    fi
elif [[ -z "${MASON_VERSION}" && -z "${MASON_NAME}" ]]; then
    # this is install, with zero args. err if no config.json
    if [ ! -e "${MASON_DIR}/config.json" ]; then
        echo "Missing config.json"
        exit 1
    else
        MASON_INSTALL_CONFIG="${MASON_DIR}/config.json"
    fi
elif [ "${MASON_NAME}" == "-c" ]; then
    # check for mason_version json exists
    if [ ! -e "${MASON_DIR}/${MASON_VERSION}.json" ]; then
        echo "Missing ${MASON_VERSION}.json"
        exit 1
    else
        MASON_INSTALL_CONFIG="${MASON_DIR}/${MASON_VERSION}.json"
        unset MASON_NAME
        unset MASON_VERSION
    fi
fi

. ${MASON_DIR}/mason.sh


function mason_load_install_script() {
    MASON_SCRIPT="${MASON_ROOT}/.scripts/${MASON_SLUG}.sh"

    if [ ! -f "${MASON_SCRIPT}" ]; then
        mason_step "Loading install script 'https://github.com/mapbox/mason/blob/${MASON_SLUG}/script.sh'..."
        mkdir -p "${MASON_ROOT}/.scripts"
        curl --retry 3 -s -f -# -L \
          https://raw.githubusercontent.com/mapbox/mason/${MASON_SLUG}/script.sh \
          -o "${MASON_ROOT}/.scripts/${MASON_SLUG}.sh" || (mason_error "Could not find install script for ${MASON_SLUG}" && exit 1)
    fi

    bash "${MASON_SCRIPT}" "${MASON_COMMAND}" "$@"
}

if [ ! -e "${MASON_INSTALL_CONFIG}" ]; then
    # Load script if it doesn't exist yet
    mason_load_install_script
else
    mason_run install
fi
